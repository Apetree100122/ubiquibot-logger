{"version":3,"sources":["../src/supabase/helpers/tables/pretty-logs.ts","../src/supabase/constants.ts"],"sourcesContent":["import util from \"util\";\r\nimport { Colors, Metadata, PrettyLogsWithOk } from \"../../types/log-types\";\r\nimport { COLORS, LOG_LEVEL } from \"../../constants\";\r\n\r\nexport class PrettyLogs {\r\n  constructor() {\r\n    this.ok = this.ok.bind(this);\r\n    this.info = this.info.bind(this);\r\n    this.error = this.error.bind(this);\r\n    this.fatal = this.fatal.bind(this);\r\n    this.debug = this.debug.bind(this);\r\n    this.verbose = this.verbose.bind(this);\r\n  }\r\n  public fatal(message: string, metadata?: Metadata | string | unknown) {\r\n    this._logWithStack(LOG_LEVEL.FATAL, message, metadata);\r\n  }\r\n\r\n  public error(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(LOG_LEVEL.ERROR, message, metadata);\r\n  }\r\n\r\n  public ok(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(\"ok\", message, metadata);\r\n  }\r\n\r\n  public info(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(LOG_LEVEL.INFO, message, metadata);\r\n  }\r\n\r\n  public debug(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(LOG_LEVEL.DEBUG, message, metadata);\r\n  }\r\n\r\n  public verbose(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(LOG_LEVEL.VERBOSE, message, metadata);\r\n  }\r\n\r\n  private _logWithStack(type: PrettyLogsWithOk, message: string, metaData?: Metadata | string | unknown) {\r\n    this._log(type, message);\r\n    if (typeof metaData === \"string\") {\r\n      this._log(type, metaData);\r\n      return;\r\n    }\r\n    if (metaData) {\r\n      const metadata = metaData as Metadata;\r\n      let stack = metadata?.error?.stack || metadata?.stack;\r\n      if (!stack) {\r\n        // generate and remove the top four lines of the stack trace\r\n        const stackTrace = new Error().stack?.split(\"\\n\");\r\n        if (stackTrace) {\r\n          stackTrace.splice(0, 4);\r\n          stack = stackTrace.filter((line) => line.includes(\".ts:\")).join(\"\\n\");\r\n        }\r\n      }\r\n      const newMetadata = { ...metadata };\r\n      delete newMetadata.message;\r\n      delete newMetadata.name;\r\n      delete newMetadata.stack;\r\n\r\n      if (!this._isEmpty(newMetadata)) {\r\n        this._log(type, newMetadata);\r\n      }\r\n\r\n      if (typeof stack == \"string\") {\r\n        const prettyStack = this._formatStackTrace(stack, 1);\r\n        const colorizedStack = this._colorizeText(prettyStack, COLORS.dim);\r\n        this._log(type, colorizedStack);\r\n      } else if (stack) {\r\n        const prettyStack = this._formatStackTrace((stack as unknown as string[]).join(\"\\n\"), 1);\r\n        const colorizedStack = this._colorizeText(prettyStack, COLORS.dim);\r\n        this._log(type, colorizedStack);\r\n      } else {\r\n        throw new Error(\"Stack is null\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private _colorizeText(text: string, color: Colors): string {\r\n    if (!color) {\r\n      throw new Error(`Invalid color: ${color}`);\r\n    }\r\n    return color.concat(text).concat(COLORS.reset);\r\n  }\r\n\r\n  private _formatStackTrace(stack: string, linesToRemove = 0, prefix = \"\"): string {\r\n    const lines = stack.split(\"\\n\");\r\n    for (let i = 0; i < linesToRemove; i++) {\r\n      lines.shift(); // Remove the top line\r\n    }\r\n    return lines\r\n      .map((line) => `${prefix}${line.replace(/\\s*at\\s*/, \"  â†³  \")}`) // Replace 'at' and prefix every line\r\n      .join(\"\\n\");\r\n  }\r\n\r\n  private _isEmpty(obj: Record<string, unknown>) {\r\n    return !Reflect.ownKeys(obj).some((key) => typeof obj[String(key)] !== \"function\");\r\n  }\r\n\r\n  private _log(type: PrettyLogsWithOk, message: string | Record<string, unknown>) {\r\n    const defaultSymbols: Record<PrettyLogsWithOk, string> = {\r\n      fatal: \"Ã—\",\r\n      ok: \"âœ“\",\r\n      error: \"âš \",\r\n      info: \"â€º\",\r\n      debug: \"â€ºâ€º\",\r\n      verbose: \"ðŸ’¬\",\r\n    };\r\n\r\n    const symbol = defaultSymbols[type];\r\n\r\n    // Formatting the message\r\n    const messageFormatted = typeof message === \"string\" ? message : util.inspect(message, { showHidden: true, depth: null, breakLength: Infinity });\r\n    // const messageFormatted =\r\n    //   typeof message === \"string\" ? message : JSON.stringify(Logs.convertErrorsIntoObjects(message));\r\n\r\n    // Constructing the full log string with the prefix symbol\r\n    const lines = messageFormatted.split(\"\\n\");\r\n    const logString = lines\r\n      .map((line, index) => {\r\n        // Add the symbol only to the first line and keep the indentation for the rest\r\n        const prefix = index === 0 ? `\\t${symbol}` : `\\t${\" \".repeat(symbol.length)}`;\r\n        return `${prefix} ${line}`;\r\n      })\r\n      .join(\"\\n\");\r\n\r\n    const fullLogString = logString;\r\n\r\n    const colorMap: Record<PrettyLogsWithOk, [keyof typeof console, Colors]> = {\r\n      fatal: [\"error\", COLORS.fgRed],\r\n      ok: [\"log\", COLORS.fgGreen],\r\n      error: [\"warn\", COLORS.fgYellow],\r\n      info: [\"info\", COLORS.dim],\r\n      debug: [\"debug\", COLORS.fgMagenta],\r\n      verbose: [\"debug\", COLORS.dim],\r\n    };\r\n\r\n    const _console = console[colorMap[type][0] as keyof typeof console] as (...args: string[]) => void;\r\n    if (typeof _console === \"function\") {\r\n      _console(this._colorizeText(fullLogString, colorMap[type][1]));\r\n    } else {\r\n      throw new Error(fullLogString);\r\n    }\r\n  }\r\n}\r\n","export const COLORS = {\r\n  reset: \"\\x1b[0m\",\r\n  bright: \"\\x1b[1m\",\r\n  dim: \"\\x1b[2m\",\r\n  underscore: \"\\x1b[4m\",\r\n  blink: \"\\x1b[5m\",\r\n  reverse: \"\\x1b[7m\",\r\n  hidden: \"\\x1b[8m\",\r\n\r\n  fgBlack: \"\\x1b[30m\",\r\n  fgRed: \"\\x1b[31m\",\r\n  fgGreen: \"\\x1b[32m\",\r\n  fgYellow: \"\\x1b[33m\",\r\n  fgBlue: \"\\x1b[34m\",\r\n  fgMagenta: \"\\x1b[35m\",\r\n  fgCyan: \"\\x1b[36m\",\r\n  fgWhite: \"\\x1b[37m\",\r\n\r\n  bgBlack: \"\\x1b[40m\",\r\n  bgRed: \"\\x1b[41m\",\r\n  bgGreen: \"\\x1b[42m\",\r\n  bgYellow: \"\\x1b[43m\",\r\n  bgBlue: \"\\x1b[44m\",\r\n  bgMagenta: \"\\x1b[45m\",\r\n  bgCyan: \"\\x1b[46m\",\r\n  bgWhite: \"\\x1b[47m\",\r\n} as const;\r\n\r\nexport const LOG_LEVEL = {\r\n  FATAL: \"fatal\",\r\n  ERROR: \"error\",\r\n  INFO: \"info\",\r\n  VERBOSE: \"verbose\",\r\n  DEBUG: \"debug\",\r\n} as const;\r\n"],"mappings":"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","names":[]}