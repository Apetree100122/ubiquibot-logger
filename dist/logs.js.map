{"version":3,"sources":["../src/supabase/helpers/tables/pretty-logs.ts","../src/supabase/constants.ts","../src/supabase/types/log-types.ts","../src/supabase/helpers/tables/logs.ts"],"sourcesContent":["import util from \"util\";\r\nimport { Colors, Metadata, PrettyLogsWithOk } from \"../../types/log-types\";\r\nimport { COLORS, LOG_LEVEL } from \"../../constants\";\r\n\r\nexport class PrettyLogs {\r\n  constructor() {\r\n    this.ok = this.ok.bind(this);\r\n    this.info = this.info.bind(this);\r\n    this.error = this.error.bind(this);\r\n    this.fatal = this.fatal.bind(this);\r\n    this.debug = this.debug.bind(this);\r\n    this.verbose = this.verbose.bind(this);\r\n  }\r\n  public fatal(message: string, metadata?: Metadata | string | unknown) {\r\n    this._logWithStack(LOG_LEVEL.FATAL, message, metadata);\r\n  }\r\n\r\n  public error(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(LOG_LEVEL.ERROR, message, metadata);\r\n  }\r\n\r\n  public ok(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(\"ok\", message, metadata);\r\n  }\r\n\r\n  public info(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(LOG_LEVEL.INFO, message, metadata);\r\n  }\r\n\r\n  public debug(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(LOG_LEVEL.DEBUG, message, metadata);\r\n  }\r\n\r\n  public verbose(message: string, metadata?: Metadata | string) {\r\n    this._logWithStack(LOG_LEVEL.VERBOSE, message, metadata);\r\n  }\r\n\r\n  private _logWithStack(type: PrettyLogsWithOk, message: string, metaData?: Metadata | string | unknown) {\r\n    this._log(type, message);\r\n    if (typeof metaData === \"string\") {\r\n      this._log(type, metaData);\r\n      return;\r\n    }\r\n    if (metaData) {\r\n      const metadata = metaData as Metadata;\r\n      let stack = metadata?.error?.stack || metadata?.stack;\r\n      if (!stack) {\r\n        // generate and remove the top four lines of the stack trace\r\n        const stackTrace = new Error().stack?.split(\"\\n\");\r\n        if (stackTrace) {\r\n          stackTrace.splice(0, 4);\r\n          stack = stackTrace.filter((line) => line.includes(\".ts:\")).join(\"\\n\");\r\n        }\r\n      }\r\n      const newMetadata = { ...metadata };\r\n      delete newMetadata.message;\r\n      delete newMetadata.name;\r\n      delete newMetadata.stack;\r\n\r\n      if (!this._isEmpty(newMetadata)) {\r\n        this._log(type, newMetadata);\r\n      }\r\n\r\n      if (typeof stack == \"string\") {\r\n        const prettyStack = this._formatStackTrace(stack, 1);\r\n        const colorizedStack = this._colorizeText(prettyStack, COLORS.dim);\r\n        this._log(type, colorizedStack);\r\n      } else if (stack) {\r\n        const prettyStack = this._formatStackTrace((stack as unknown as string[]).join(\"\\n\"), 1);\r\n        const colorizedStack = this._colorizeText(prettyStack, COLORS.dim);\r\n        this._log(type, colorizedStack);\r\n      } else {\r\n        throw new Error(\"Stack is null\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private _colorizeText(text: string, color: Colors): string {\r\n    if (!color) {\r\n      throw new Error(`Invalid color: ${color}`);\r\n    }\r\n    return color.concat(text).concat(COLORS.reset);\r\n  }\r\n\r\n  private _formatStackTrace(stack: string, linesToRemove = 0, prefix = \"\"): string {\r\n    const lines = stack.split(\"\\n\");\r\n    for (let i = 0; i < linesToRemove; i++) {\r\n      lines.shift(); // Remove the top line\r\n    }\r\n    return lines\r\n      .map((line) => `${prefix}${line.replace(/\\s*at\\s*/, \"  â†³  \")}`) // Replace 'at' and prefix every line\r\n      .join(\"\\n\");\r\n  }\r\n\r\n  private _isEmpty(obj: Record<string, unknown>) {\r\n    return !Reflect.ownKeys(obj).some((key) => typeof obj[String(key)] !== \"function\");\r\n  }\r\n\r\n  private _log(type: PrettyLogsWithOk, message: string | Record<string, unknown>) {\r\n    const defaultSymbols: Record<PrettyLogsWithOk, string> = {\r\n      fatal: \"Ã—\",\r\n      ok: \"âœ“\",\r\n      error: \"âš \",\r\n      info: \"â€º\",\r\n      debug: \"â€ºâ€º\",\r\n      verbose: \"ðŸ’¬\",\r\n    };\r\n\r\n    const symbol = defaultSymbols[type];\r\n\r\n    // Formatting the message\r\n    const messageFormatted = typeof message === \"string\" ? message : util.inspect(message, { showHidden: true, depth: null, breakLength: Infinity });\r\n    // const messageFormatted =\r\n    //   typeof message === \"string\" ? message : JSON.stringify(Logs.convertErrorsIntoObjects(message));\r\n\r\n    // Constructing the full log string with the prefix symbol\r\n    const lines = messageFormatted.split(\"\\n\");\r\n    const logString = lines\r\n      .map((line, index) => {\r\n        // Add the symbol only to the first line and keep the indentation for the rest\r\n        const prefix = index === 0 ? `\\t${symbol}` : `\\t${\" \".repeat(symbol.length)}`;\r\n        return `${prefix} ${line}`;\r\n      })\r\n      .join(\"\\n\");\r\n\r\n    const fullLogString = logString;\r\n\r\n    const colorMap: Record<PrettyLogsWithOk, [keyof typeof console, Colors]> = {\r\n      fatal: [\"error\", COLORS.fgRed],\r\n      ok: [\"log\", COLORS.fgGreen],\r\n      error: [\"warn\", COLORS.fgYellow],\r\n      info: [\"info\", COLORS.dim],\r\n      debug: [\"debug\", COLORS.fgMagenta],\r\n      verbose: [\"debug\", COLORS.dim],\r\n    };\r\n\r\n    const _console = console[colorMap[type][0] as keyof typeof console] as (...args: string[]) => void;\r\n    if (typeof _console === \"function\") {\r\n      _console(this._colorizeText(fullLogString, colorMap[type][1]));\r\n    } else {\r\n      throw new Error(fullLogString);\r\n    }\r\n  }\r\n}\r\n","export const COLORS = {\r\n  reset: \"\\x1b[0m\",\r\n  bright: \"\\x1b[1m\",\r\n  dim: \"\\x1b[2m\",\r\n  underscore: \"\\x1b[4m\",\r\n  blink: \"\\x1b[5m\",\r\n  reverse: \"\\x1b[7m\",\r\n  hidden: \"\\x1b[8m\",\r\n\r\n  fgBlack: \"\\x1b[30m\",\r\n  fgRed: \"\\x1b[31m\",\r\n  fgGreen: \"\\x1b[32m\",\r\n  fgYellow: \"\\x1b[33m\",\r\n  fgBlue: \"\\x1b[34m\",\r\n  fgMagenta: \"\\x1b[35m\",\r\n  fgCyan: \"\\x1b[36m\",\r\n  fgWhite: \"\\x1b[37m\",\r\n\r\n  bgBlack: \"\\x1b[40m\",\r\n  bgRed: \"\\x1b[41m\",\r\n  bgGreen: \"\\x1b[42m\",\r\n  bgYellow: \"\\x1b[43m\",\r\n  bgBlue: \"\\x1b[44m\",\r\n  bgMagenta: \"\\x1b[45m\",\r\n  bgCyan: \"\\x1b[46m\",\r\n  bgWhite: \"\\x1b[47m\",\r\n} as const;\r\n\r\nexport const LOG_LEVEL = {\r\n  FATAL: \"fatal\",\r\n  ERROR: \"error\",\r\n  INFO: \"info\",\r\n  VERBOSE: \"verbose\",\r\n  DEBUG: \"debug\",\r\n} as const;\r\n","import { COLORS, LOG_LEVEL } from \"../constants\";\r\nimport { Database } from \"./database\";\r\n\r\ntype LogFunction = (message: string, metadata?: Metadata) => void;\r\nexport type Colors = (typeof COLORS)[keyof typeof COLORS];\r\nexport type LogLevel = (typeof LOG_LEVEL)[keyof typeof LOG_LEVEL];\r\nexport type PrettyLogsWithOk = \"ok\" | LogLevel;\r\nexport type LogInsert = Database[\"public\"][\"Tables\"][\"logs\"][\"Insert\"];\r\nexport type LogMessage = { raw: string; diff: string; level: LogLevel; type: PrettyLogsWithOk };\r\n\r\nexport type LogParams = {\r\n    level: LogLevel;\r\n    consoleLog: LogFunction;\r\n    logMessage: string;\r\n    metadata?: Metadata;\r\n    postComment?: boolean;\r\n    type: PrettyLogsWithOk;\r\n};\r\n\r\nexport interface Metadata {\r\n    error?: { stack?: string };\r\n    stack?: string | string[] | null;\r\n    message?: string;\r\n    name?: string;\r\n    [key: string]: unknown;\r\n}\r\n\r\nexport class LogReturn {\r\n    logMessage: LogMessage;\r\n    metadata?: Metadata;\r\n\r\n    constructor(logMessage: LogMessage, metadata?: Metadata) {\r\n        this.logMessage = logMessage;\r\n        this.metadata = metadata;\r\n    }\r\n}\r\n","import { PrettyLogs } from \"./pretty-logs\";\r\nimport { Metadata, LogLevel, LogParams, LogReturn } from \"../../types/log-types\";\r\nimport { LOG_LEVEL } from \"../../constants\";\r\n\r\nexport class Logs {\r\n  private _maxLevel = -1;\r\n  static console: PrettyLogs;\r\n\r\n  private _log({ level, consoleLog, logMessage, metadata, type }: LogParams): LogReturn | null {\r\n    if (this._getNumericLevel(level) > this._maxLevel) return null; // filter out more verbose logs according to maxLevel set in config\r\n\r\n    // needs to generate three versions of the information.\r\n    // they must all first serialize the error object if it exists\r\n    // - the comment to post on supabase (must be raw)\r\n    // - the comment to post on github (must include diff syntax)\r\n    // - the comment to post on the console (must be colorized)\r\n\r\n    consoleLog(logMessage, metadata || undefined);\r\n    return new LogReturn(\r\n      {\r\n        raw: logMessage,\r\n        diff: this._diffColorCommentMessage(type, logMessage),\r\n        type,\r\n        level,\r\n      },\r\n      metadata\r\n    );\r\n  }\r\n\r\n  private _addDiagnosticInformation(metadata: Record<string, unknown> | string | number | null | undefined) {\r\n    // this is a utility function to get the name of the function that called the log\r\n    // I have mixed feelings on this because it manipulates metadata later possibly without the developer understanding why and where,\r\n    // but seems useful for the metadata parser to understand where the comment originated from\r\n\r\n    if (!metadata) {\r\n      metadata = {};\r\n    }\r\n    if (typeof metadata == \"string\" || typeof metadata == \"number\") {\r\n      // TODO: think i need to support every data type\r\n      metadata = { message: metadata };\r\n    }\r\n\r\n    const stackLines = new Error().stack?.split(\"\\n\") || [];\r\n    if (stackLines.length > 3) {\r\n      const callerLine = stackLines[3]; // .replace(process.cwd(), \"\");\r\n      const match = callerLine.match(/at (\\S+)/);\r\n      if (match) {\r\n        metadata.caller = match[1];\r\n      }\r\n    }\r\n\r\n    return metadata;\r\n  }\r\n\r\n  public ok(log: string, metadata?: Metadata, postComment?: boolean): LogReturn | null {\r\n    metadata = this._addDiagnosticInformation(metadata);\r\n    return this._log({\r\n      level: LOG_LEVEL.INFO,\r\n      consoleLog: Logs.console.ok,\r\n      logMessage: log,\r\n      metadata,\r\n      postComment,\r\n      type: \"ok\",\r\n    });\r\n  }\r\n\r\n  public info(log: string, metadata?: Metadata, postComment?: boolean): LogReturn | null {\r\n    metadata = this._addDiagnosticInformation(metadata);\r\n    return this._log({\r\n      level: LOG_LEVEL.INFO,\r\n      consoleLog: Logs.console.info,\r\n      logMessage: log,\r\n      metadata,\r\n      postComment,\r\n      type: \"info\",\r\n    });\r\n  }\r\n\r\n  public error(log: string, metadata?: Metadata, postComment?: boolean): LogReturn | null {\r\n    metadata = this._addDiagnosticInformation(metadata);\r\n    return this._log({\r\n      level: LOG_LEVEL.ERROR,\r\n      consoleLog: Logs.console.error,\r\n      logMessage: log,\r\n      metadata,\r\n      postComment,\r\n      type: \"error\",\r\n    });\r\n  }\r\n\r\n  public debug(log: string, metadata?: Metadata, postComment?: boolean): LogReturn | null {\r\n    metadata = this._addDiagnosticInformation(metadata);\r\n    return this._log({\r\n      level: LOG_LEVEL.DEBUG,\r\n      consoleLog: Logs.console.debug,\r\n      logMessage: log,\r\n      metadata,\r\n      postComment,\r\n      type: \"debug\",\r\n    });\r\n  }\r\n\r\n  public fatal(log: string, metadata?: Metadata, postComment?: boolean): LogReturn | null {\r\n    if (!metadata) {\r\n      metadata = Logs.convertErrorsIntoObjects(new Error(log)) as Metadata;\r\n      const stack = metadata.stack as string[];\r\n      stack.splice(1, 1);\r\n      metadata.stack = stack;\r\n    }\r\n\r\n    if (metadata instanceof Error) {\r\n      metadata = Logs.convertErrorsIntoObjects(metadata) as Metadata;\r\n      const stack = metadata.stack as string[];\r\n      stack.splice(1, 1);\r\n      metadata.stack = stack;\r\n    }\r\n\r\n    metadata = this._addDiagnosticInformation(metadata);\r\n    return this._log({\r\n      level: LOG_LEVEL.FATAL,\r\n      consoleLog: Logs.console.fatal,\r\n      logMessage: log,\r\n      metadata,\r\n      postComment,\r\n      type: \"fatal\",\r\n    });\r\n  }\r\n\r\n  verbose(log: string, metadata?: Metadata, postComment?: boolean): LogReturn | null {\r\n    metadata = this._addDiagnosticInformation(metadata);\r\n    return this._log({\r\n      level: LOG_LEVEL.VERBOSE,\r\n      consoleLog: Logs.console.verbose,\r\n      logMessage: log,\r\n      metadata,\r\n      postComment,\r\n      type: \"verbose\",\r\n    });\r\n  }\r\n\r\n  constructor(logLevel: LogLevel) {\r\n    this._maxLevel = this._getNumericLevel(logLevel);\r\n    Logs.console = new PrettyLogs();\r\n  }\r\n\r\n  static _commentMetaData(metadata: Metadata, level: LogLevel) {\r\n    Logs.console.debug(\"the main place that metadata is being serialized as an html comment\");\r\n    const prettySerialized = JSON.stringify(metadata, null, 2);\r\n    // first check if metadata is an error, then post it as a json comment\r\n    // otherwise post it as an html comment\r\n    if (level === LOG_LEVEL.FATAL) {\r\n      return [\"```json\", prettySerialized, \"```\"].join(\"\\n\");\r\n    } else {\r\n      return [\"<!--\", prettySerialized, \"-->\"].join(\"\\n\");\r\n    }\r\n  }\r\n\r\n  private _diffColorCommentMessage(type: string, message: string) {\r\n    const diffPrefix = {\r\n      fatal: \"-\", // - text in red\r\n      ok: \"+\", // + text in green\r\n      error: \"!\", // ! text in orange\r\n      // info: \"#\", // # text in gray\r\n      // debug: \"@@@@\",// @@ text in purple (and bold)@@\r\n      // error: null,\r\n      // warn: null,\r\n      // info: null,\r\n      // verbose: \"#\",\r\n      // debug: \"#\",\r\n    };\r\n    const selected = diffPrefix[type as keyof typeof diffPrefix];\r\n\r\n    if (selected) {\r\n      message = message\r\n        .trim() // Remove leading and trailing whitespace\r\n        .split(\"\\n\")\r\n        .map((line) => `${selected} ${line}`)\r\n        .join(\"\\n\");\r\n    } else if (type === \"debug\") {\r\n      // debug has special formatting\r\n      message = message\r\n        .split(\"\\n\")\r\n        .map((line) => `@@ ${line} @@`)\r\n        .join(\"\\n\"); // debug: \"@@@@\",\r\n    } else {\r\n      // default to gray\r\n      message = message\r\n        .split(\"\\n\")\r\n        .map((line) => `# ${line}`)\r\n        .join(\"\\n\");\r\n    }\r\n\r\n    const diffHeader = \"```diff\";\r\n    const diffFooter = \"```\";\r\n\r\n    return [diffHeader, message, diffFooter].join(\"\\n\");\r\n  }\r\n\r\n  private _getNumericLevel(level: LogLevel) {\r\n    switch (level) {\r\n      case LOG_LEVEL.FATAL:\r\n        return 0;\r\n      case LOG_LEVEL.ERROR:\r\n        return 1;\r\n      case LOG_LEVEL.INFO:\r\n        return 2;\r\n      case LOG_LEVEL.VERBOSE:\r\n        return 4;\r\n      case LOG_LEVEL.DEBUG:\r\n        return 5;\r\n      default:\r\n        return -1; // Invalid level\r\n    }\r\n  }\r\n  static convertErrorsIntoObjects(obj: unknown): Metadata | unknown {\r\n    // this is a utility function to render native errors in the console, the database, and on GitHub.\r\n    if (obj instanceof Error) {\r\n      return {\r\n        message: obj.message,\r\n        name: obj.name,\r\n        stack: obj.stack ? obj.stack.split(\"\\n\") : null,\r\n      };\r\n    } else if (typeof obj === \"object\" && obj !== null) {\r\n      const keys = Object.keys(obj);\r\n      keys.forEach((key) => {\r\n        obj[key] = this.convertErrorsIntoObjects(obj[key]);\r\n      });\r\n    }\r\n    return obj;\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}